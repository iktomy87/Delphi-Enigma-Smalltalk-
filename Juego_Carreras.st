ImageMorph subclass: #Enemigo_Carrera	instanceVariableNames: 'velocidad'	classVariableNames: ''	poolDictionaries: ''	category: 'Juego_Carreras'!!Enemigo_Carrera methodsFor: 'action' stamp: 'AlejandroTorres 11/24/2024 15:37'!moverEnemigo: aVector and: direccion"Mueve al jugador/enemigo a cierta posición y cambia su sprite dependiendo en la dirección que se mueva"[  	direccion caseOf: {        ['izq'] -> [self image: (Form fromFileNamed: 'Jugador-izq-120@100.png').].          ['der'] -> [self image: (Form fromFileNamed: 'Jugador-der-120@100.png').].          ['arriba'] -> [self image: (Form fromFileNamed: 'Jugador-100@100.png').].           ['abajo'] -> [self image: (Form fromFileNamed: 'Jugador-100@100.png').].       } otherwise: [].	self position: self position + aVector.] fork.! !!Enemigo_Carrera methodsFor: 'initialization' stamp: 'AlejandroTorres 11/18/2024 02:27'!initialize super initialize. self image: (Form fromFileNamed: 'carreraEnemigo.png'). self position: 215@50. "Coordenadas de inico del enemigo"velocidad:= 15. 	 ! !!Enemigo_Carrera methodsFor: 'control' stamp: 'AlejandroTorres 11/24/2024 15:21'!detectarColision: enemigo 	"Detecta la colisión entre el enemigo y el jugador"    | bounds_self bounds_enemigo left_self right_self top_self bottom_self       left_enemigo right_enemigo top_enemigo bottom_enemigo |    bounds_self := self bounds.    bounds_enemigo := enemigo bounds.    "Restamos 20 píxeles en X e Y a ambos autos"    "Para self"    left_self := bounds_self left + 20.    "Mueve el borde izquierdo 20 píxeles a la derecha"    right_self := bounds_self right - 20.  "Mueve el borde derecho 20 píxeles a la izquierda"    top_self := bounds_self top + 20.      "Mueve el borde superior 20 píxeles hacia abajo"    bottom_self := bounds_self bottom - 20. "Mueve el borde inferior 20 píxeles hacia arriba"    "Para enemigo"    left_enemigo := bounds_enemigo left + 20.    "Mueve el borde izquierdo 20 píxeles a la derecha"    right_enemigo := bounds_enemigo right - 20.  "Mueve el borde derecho 20 píxeles a la izquierda"    top_enemigo := bounds_enemigo top + 20.      "Mueve el borde superior 20 píxeles hacia abajo"    bottom_enemigo := bounds_enemigo bottom - 20. "Mueve el borde inferior 20 píxeles hacia arriba"    "Verificar si hay colision, usando los limites ajustados"    ((right_self >= left_enemigo and: [left_self <= right_enemigo])        and: [bottom_self >= top_enemigo and: [top_self <= bottom_enemigo]])         ifTrue: [                        ^false.         ] ifFalse: [                        ^true.         ].! !!Enemigo_Carrera methodsFor: 'accessing' stamp: 'AlejandroTorres 11/14/2024 12:27'!velocidad: anObject	velocidad := anObject! !!Enemigo_Carrera methodsFor: 'accessing' stamp: 'AlejandroTorres 11/14/2024 12:27'!velocidad	^ velocidad! !Morph subclass: #Juego_Carreras	instanceVariableNames: 'corriendo jugador textoScore gameOver gameEndCallback limite1 limite2'	classVariableNames: ''	poolDictionaries: ''	category: 'Juego_Carreras'!!Juego_Carreras methodsFor: 'drawing' stamp: 'AlejandroTorres 11/24/2024 15:05'!dibujarLimites	"Dibuja limites invisibles con respecto a la posición de la ventana principal para que el jugador no se salga del camino"	|coordenadas_l1 coordenadas_l2|	limite1:= Morph new. 	coordenadas_l1:= ((self bounds left + 120)@(self bounds top)).	limite1 bounds: ((coordenadas_l1) extent: 10@640).		self addMorph: limite1. 		limite2:= Morph new. 	coordenadas_l2:= ((self bounds left + 520)@(self bounds top)).	limite2 bounds: (coordenadas_l2 extent: 10@640).	 	self addMorph:	limite2. 	! !!Juego_Carreras methodsFor: 'drawing' stamp: 'AlejandroTorres 11/24/2024 15:48'!dibujarTodo|enemigo| "Se inicializa al enemigo y se lo agrega a la ventana principal"enemigo:= Enemigo_Carrera new. self addMorph: enemigo.	corriendo:= true. [  	[corriendo] whileTrue:[		self dibujarEnemigo: enemigo.				self dibujarScore. 		(Delay forSeconds: 0.1) wait. "Se coloca un pequeño tiempo de espera entre las iteraciones del bucle para generar el efecto de animación deseado"	].	(corriendo) ifFalse:[		self terminarJuego.	]] fork.	! !!Juego_Carreras methodsFor: 'drawing' stamp: 'AlejandroTorres 11/24/2024 15:57'!dibujarScore	textoScore contents: 'SCORE: ', (jugador score) asString. ! !!Juego_Carreras methodsFor: 'drawing' stamp: 'AlejandroTorres 11/24/2024 16:23'!dibujarEnemigo: enemigo "Mueve al enemigo y aumenta el score cada vez que se sale de la pantalla"|newPosition randomNum score x_inicial_random velocidad_jugador|score:= jugador score.velocidad_jugador:= jugador velocidad. randomNum := SubRandom new. "Se utilizan las bounds para que siga funcionando aunque se mueva la ventana"x_inicial_random := randomNum nextInt: (self bounds left + 130) to: (self bounds left + 440). "Se ajusta el rango de la nueva posición para que aparezca dentro del camino" newPosition := enemigo position + (0 @ (enemigo velocidad)). "Mover hacia abajo (incrementar Y)"                "Si el enemigo ha salido de la pantalla (supera la altura), se reposiciona arriba"((enemigo bounds bottom)  >= (self bounds bottom)) ifTrue: [  "Reaparecer en la parte superior de la ventana en una posición de X random"	score:= score + 1. 	jugador score: score.    newPosition := (x_inicial_random @ self bounds top). "Se ajusta a la altura de la ventana en cualquier posición"	enemigo velocidad: (enemigo velocidad + 3.5). "Aumenta la velocidad del jugador y del enemigo en 4 pixeles por cada enemigo que sale de la pantalla, que equivale a 1 de score"	jugador velocidad: velocidad_jugador + 4.].   enemigo position: newPosition.  "Actualiza la posición del enemigo"           		corriendo:= (enemigo detectarColision: jugador) value. 	! !!Juego_Carreras methodsFor: 'event handler' stamp: 'AlejandroTorres 11/12/2024 23:28'!handlesKeyboard    ^ true! !!Juego_Carreras methodsFor: 'event handler' stamp: 'AlejandroTorres 11/24/2024 15:50'!handleKeystroke: anEvent|velocidad_jugador velocidad_jugador_negativa| "El enemigo también se mueve respecto a la velocidad del jugador"velocidad_jugador:= jugador velocidad.  "La velocidad sería la cantidad de pixeles que se mueve el jugador en cualquier dirección"velocidad_jugador_negativa:= (-1 * jugador velocidad). (corriendo)ifTrue:[   anEvent keyValue caseOf: {        [28] -> [						((jugador bounds left)  <= (limite1 bounds right)) ifFalse:[ "Condicional para que no se salga del camino por la izquierda"						jugador moverEnemigo: (velocidad_jugador_negativa  @ 0) and: 'izq']].  "Izquierda"        [30] -> [						((jugador bounds top)  <= (self bounds top)) ifFalse:[        "Condicional para que no se salga del mapa por arriba"						jugador moverEnemigo: (0 @ velocidad_jugador_negativa ) and: 'arriba']]. "Arriba"        [29] -> [						((jugador bounds right)  >= (limite2 bounds left)) ifFalse:[  "Condicional para que no se salga del camino por la derecha"						jugador moverEnemigo: (velocidad_jugador  @ 0) and: 'der'.]].   "Derecha"        [31] -> [						((jugador bounds bottom)  >= (self bounds bottom)) ifFalse:[  "Condicional para que no se salga del mapa por abajo"						jugador moverEnemigo: (0 @ velocidad_jugador ) and: 'abajo'.].]   "Abajo"} otherwise: [].]! !!Juego_Carreras methodsFor: 'initialization' stamp: 'AlejandroTorres 11/18/2024 02:04'!crearFondo|fondo|	fondo:= ImageMorph new.   fondo image: (Form fromFileNamed: 'FondoCarreras.png').    "Ajusta el tama‚àö¬±o del Morph al tama‚àö¬±o deseado"    fondo extent: 640 @ 640.  "Tama‚àö¬±o del Morph"        "Coloca el Morph en la ventana"    fondo bounds: (0 @ 0 extent: 640 @ 640). "Posici‚àö‚â•n y tama‚àö¬±o"        "Ajusta el tama‚àö¬±o del men‚àö‚à´"    self extent: 640 @ 640.	self addMorph: fondo.! !!Juego_Carreras methodsFor: 'initialization' stamp: 'AlejandroTorres 11/24/2024 15:56'!initialize	super initialize.  	self dibujarLimites.	self color: Color black.  "Se pone negro el fondo por un datalle en el sprite del fondo" 	self bounds: (0@0 extent: 640@640). "Establecemos el tama‚àö¬±o inicial de la ventana"  	self crearFondo. 	self dibujarTodo.  	self takeKeyboardFocus. 		jugador:= Jugador_Carrera new.		self addMorph: jugador.   textoScore := TextMorph new.  "Crear el morph de texto"	textoScore contents: 'SCORE: 0'.    textoScore color: Color white. "Configurar el color del texto"   textoScore position: 70@80. "Posicionar el texto en el mundo"   "Ajustar el tama‚àö¬±o del cuadro de texto (extent)"   textoScore extent: 100@50. "Ajustar manualmente el tama‚àö¬±o del morph"	self addMorph: textoScore.			self iniciar.! !!Juego_Carreras methodsFor: 'enumerating' stamp: 'Tomy 11/21/2024 03:43'!whenGameEndsDo: aBlock    gameEndCallback := aBlock.! !!Juego_Carreras methodsFor: 'open/exit' stamp: 'AlejandroTorres 11/24/2024 15:55'!terminarJuego    gameOver ifTrue: [^self].  "Evita ejecuci√≥n repetida"    gameOver := true.  "Marca el juego como terminado"	    gameEndCallback ifNotNil: [gameEndCallback value].    "Mostrar el puntaje una sola vez"    UIManager default inform: 'Your score is: ', (jugador score) asString.    	self owner ifNotNil: [        self owner takeKeyboardFocus.        Transcript show: 'Focus restaurado en el tablero'; cr.    ].    self delete.! !!Juego_Carreras methodsFor: 'open/exit' stamp: 'Tomy 11/21/2024 09:48'!exitGame	self delete.! !!Juego_Carreras methodsFor: 'open/exit' stamp: 'Tomy 11/21/2024 03:46'!iniciar    "Inicializar el estado del juego"    gameOver := false.  "Bandera para controlar el estado del juego"   	 self takeKeyboardFocus.        "Ciclo principal del juego"    [        [				 self takeKeyboardFocus.				self verificarPuntaje.            (Delay forMilliseconds: 40) wait.        ] repeat    ] fork.! !!Juego_Carreras methodsFor: 'accessing' stamp: 'AlejandroTorres 11/18/2024 02:14'!jugador: anObject	jugador := anObject! !!Juego_Carreras methodsFor: 'accessing' stamp: 'AlejandroTorres 11/24/2024 15:59'!puntaje^(jugador score)! !!Juego_Carreras methodsFor: 'accessing' stamp: 'AlejandroTorres 11/24/2024 15:22'!limite1	^ limite1! !!Juego_Carreras methodsFor: 'accessing' stamp: 'AlejandroTorres 11/24/2024 15:22'!limite1: anObject	limite1 := anObject! !!Juego_Carreras methodsFor: 'accessing' stamp: 'AlejandroTorres 11/18/2024 02:14'!jugador	^ jugador! !!Juego_Carreras methodsFor: 'accessing' stamp: 'AlejandroTorres 11/24/2024 15:22'!limite2	^ limite2! !!Juego_Carreras methodsFor: 'accessing' stamp: 'AlejandroTorres 11/24/2024 15:22'!limite2: anObject	limite2 := anObject! !!Juego_Carreras methodsFor: 'accessing' stamp: 'Tomy 11/21/2024 03:43'!gameOver^gameOver! !!Juego_Carreras methodsFor: 'control' stamp: 'AlejandroTorres 11/24/2024 15:55'!verificarPuntaje    (jugador score = 12 and: gameOver not) ifTrue: [        self terminarJuego.    ].! !Enemigo_Carrera subclass: #Jugador_Carrera	instanceVariableNames: 'score'	classVariableNames: ''	poolDictionaries: ''	category: 'Juego_Carreras'!!Jugador_Carrera methodsFor: 'accessing' stamp: 'AlejandroTorres 11/24/2024 15:55'!score	^ score! !!Jugador_Carrera methodsFor: 'accessing' stamp: 'AlejandroTorres 11/24/2024 15:55'!score: anObject	score := anObject! !!Jugador_Carrera methodsFor: 'initialization' stamp: 'AlejandroTorres 11/24/2024 15:56'!initialize |coordenadas_inicio|coordenadas_inicio:= 280@515. "Coordendas de incio del jugador"super initialize.self position: coordenadas_inicio. self image: (Form fromFileNamed: 'Jugador-100@100.png'). score:= 0. ! !Random subclass: #SubRandom	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Juego_Carreras'!!SubRandom methodsFor: 'random' stamp: 'AlejandroTorres 11/24/2024 15:41'!nextInt: min to: max         | randomNumber range |        range := max - min + 1.  "El rango de n‚àö‚à´meros posibles"        randomNumber := (Random new nextInt: range) + min.  "Genera el n‚àö‚à´mero aleatorio y lo ajusta"        ^randomNumber.! !